# #!/urs/bin/ruby
snippet #!
	#!/usr/bin/ruby
snippet req
	require "${1}"${2}
snippet =b
	=begin rdoc
		${1}
	=end
snippet def
	def ${1:method_name}
		${2}
	end

snippet defi
	def initialize ${1:args}
		@${1:args} = ${1:args}
	end

# Conditionals
snippet if
	if ${1:condition}
		${2}
	end
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet unless
	unless ${1:condition}
		${2}
	end
# Classes
snippet cla class .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end

snippet cla class .. initialize .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		def initialize(${2:args})
			${3}
		end


	end
snippet cla class .. < ParentClass .. initialize .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`} < ${2:ParentClass}
		def initialize(${3:args})
			${4}
		end


	end
snippet cla class .. < ApplicationController .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}Controller < ${2:ApplicationController}

	end
snippet cla class .. < ActiveRecord::Base .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`} < ${2:ActiveRecord::Base}

	end
snippet mod module .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet mod module .. module_function .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		module_function

		${2}
	end
snippet mod module .. ClassMethods .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		module ClassMethods
			${2}
		end

		module InstanceMethods

		end

		def self.included(receiver)
			receiver.extend         ClassMethods
			receiver.send :include, InstanceMethods
		end
	end
snippet bef before_filter
	before_filter :${1:method_name}

	def ${1:method_name}

	end
snippet desc describe .. end
	describe ${1:`substitute(Filename(), '^.', '\u&', '')`} do

	end
snippet it it .. end
	it '${1:something}' do

	end
snippet exp expect .. end
	expect(${1:tested_value}).to eq(${2:expected_value})
snippet feat feature .. end
	feature '${1:something}' do

	end
snippet scen scenario .. end
	scenario '${1:something}' do

	end
